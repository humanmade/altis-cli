#!/usr/bin/env node
"use strict";
const chalk = require( 'chalk' );
const inquirer = require( 'inquirer' );
const loudRejection = require('loud-rejection');
const pkg = require('../package.json');
const updateNotifier = require('update-notifier');

const configure = require( '../lib/commands' );
const Cache = require( '../lib/cache' );
const Config = require( '../lib/config' );

const logo = chalk.red(`
      :+oo/      .hmNh    oyy. /dMMm:   /syo.
   +dMMMMMMN.    oMMMy   :MMM+mMMMMMN oNMMMMm
  mMNo-.dMMM+    dMMM+   oMMMMM+ dMMMmMdhMMMN
  ++    sMMMo    NMMM.   yMMMM:  hMMMM+ .MMMd
        yMMM+   .MMMM:/+oNMMMs   NMMMo  :MMMs
        hMMMo/oydMMMMMMMMMMMM.   MMMN   oMMM+
       /NMMMMMMNmMMMh-. .MMMd   :MMMh   yMMM-
    +dMMMMMM/-  oMMMo   :MMMs   +MMMo   dMMM
  oNMMy+MMMN    sMMMo   +MMM+   sMMM:   mMMM
.mMMh. /MMMh    sMMMo   sMMM:   +ddy    hMMM-
hMMy   sMMM+    +MMMh   hMMM.           :MMMNs+os
MMM-   NMMN     .MMMM:  -/:.             :hNMMMMh
dMMh:/mMMN:      +MMMMy:..-/s.               ..
 yMMMMMMy.        -hMMMMMMMNh-
   -/:-              -///:.
`);

const main = argv => {
	// Install handlers.
	loudRejection();

	// Check updates.
	updateNotifier({ pkg }).notify();

	// Configure parser.
	const parser = configure();

	// Run.
	const config = new Config();
	config.cache = new Cache();
	config.load()
		.catch(err => {
			process.stderr.write( chalk.bold( `Error loading your configuration file from\n  `) + config.path + '\n\n' );
			process.stderr.write( chalk.dim( 'â†’ ' ) + chalk.red( err.toString() ) + '\n\n' );
			process.stderr.write( 'I can reset your configuration, but you will need to run the setup process again.' + '\n\n' );

			return inquirer.prompt([
				{
					type: "confirm",
					name: "reset",
					message: "Reset configuration?",
					default: false,
				}
			]).then( ({ reset }) => {
				if ( ! reset ) {
					throw err;
				}

				process.stderr.write( '\n' );
				return config.reset();
			});
		})
		.then(() => {
			if ( config.get( 'didSetup' ) ) {
				return;
			}

			if ( ! process.stdout.isTTY ) {
				process.stderr.write( 'hm-cli not configured. Run `hm` in an interactive terminal to set it up.\n' );
				process.exit( 1 );
			}

			process.stderr.write( chalk.bold( 'Welcome to hm-cli!\n\n' ) );
			process.stderr.write( logo + '\n\n' );

			return inquirer.prompt([
				{
					type: "confirm",
					name: "runSetup",
					message: "Run initial setup?",
					default: true,
				}
			]).then( ({ runSetup }) => {
				if ( ! runSetup ) {
					return;
				}

				const configure = require( '../lib/commands/config/setup' );
				return configure.handler( { config } );
			}).then(() => {
				process.stderr.write( `Run ${chalk.yellow('hm config setup')} at any time to run setup.\n\n` );
				return config.set( 'didSetup', true );
			});
		})
		.then( () => {
			return config.cache.load().catch( err => {
				return cache.reset();
			} );
		} )
		.then(() => {
			// Parse arguments, and pass in config.
			parser.parse( argv.slice(2), { config });
		});
}

main( process.argv );
