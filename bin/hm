#!/usr/bin/env node
"use strict";
const loudRejection = require('loud-rejection');
const pkg = require('../package.json');
const updateNotifier = require('update-notifier');
const yargs = require( 'yargs' );

const Config = require( '../lib/config' );
const csCommand = require( '../lib/commands/cs' );
const issuesCommand = require( '../lib/commands/issues' );
const prsCommand = require( '../lib/commands/prs' );
const repoCommand = require( '../lib/commands/repo' );
const testsCommand = require( '../lib/commands/tests' );

const csCallback = (args) => {
	console.log('cs stuff');
};

const configure = yargs => {
	// Global options.
	const globalCommand = yargs.version( '0.0.1' ).help();

	// "cs" command.
	yargs.command(
		'cs',
		'Coding standards commands',
		csCommand
	);

	yargs.command(
		'cli',
		'Meta CLI commands',
		command => {
		}
	);

	yargs.command(
		'completion',
		'Shell autocompletion',
		command => {
			command.showCompletionScript();
		}
	);

	yargs.command(
		'config',
		'Configuration commands',
		require( '../lib/commands/config' )
	);

	yargs.command(
		'issues',
		'Project issues',
		issuesCommand
	);

	yargs.command(
		'prs',
		'Project PRs',
		prsCommand
	);

	yargs.command(
		'repo',
		'Repository commands',
		repoCommand
	);

	yargs.command(
		'tests',
		'Unit tests commands',
		testsCommand
	);

	yargs.command(
		'stack',
		'Stack commands',
		require( '../lib/commands/stack' )
	);

	// Require at least one subcommand.
	globalCommand.demandCommand( 1 );
	globalCommand.strict();

	return globalCommand;
};

const main = argv => {
	// Install handlers.
	loudRejection();

	// Check updates.
	updateNotifier({ pkg }).notify();

	// Configure parser.
	const parser = configure( yargs );

	// Run.
	const config = new Config();
	config.load().then(() => {
		// Parse arguments, and pass in config.
		parser.parse( argv.slice(2), { config });
	});
}

main( process.argv );
